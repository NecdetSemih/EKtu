@using Web.Models
@model List<InstructorApprovedDto>
@{
    ViewData["Title"] = "Ders Onaylama";
    var instructorId = TempData["userId"] as int?;
    var instructorName = TempData["userName"] as string;
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />

<!-- Sayfanın Özel CSS Dosyası (Eğer varsa) -->
<link href="~/css/custom-styles.css" rel="stylesheet" />

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Ders Onay Sistemi</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <!-- Kullanıcı Bilgileri -->
                <li class="nav-item">
                    <a class="nav-link" href="#">Öğretmen: @instructorName</a>
                </li>
                <!-- Çıkış -->
                <li class="nav-item">
                    <a class="nav-link" href="/Instructor/Login">Çıkış</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Sayfa Başlığı ve İçerik -->
<div class="container mt-5">
    <h2 class="text-center mb-4">@ViewData["Title"]</h2>
    <input type="hidden" id="instructorId" value="@instructorId" />

    <!-- Öğrenci-Ders Tablosu -->
    <div class="table-responsive">
        <table class="table table-striped table-hover shadow-lg rounded">
            <thead class="thead-dark bg-primary text-white">
                <tr>
                    <th>Öğrenci Adı</th>
                    <th>Ders Kodu</th>
                    <th>Ders Adı</th>
                    <th>Durum</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model)
                {
                    <tr>
                        <td>@record.FirstName</td>
                        <td>@record.CourseCode</td>
                        <td>@record.CourseName</td>
                        <td>
                            @switch (record.IsApproved)
                            {
                                case 2:
                                    <span class="badge bg-success">Onaylandı</span>
                                    break;
                                case 1:
                                    <span class="badge bg-danger">Reddedildi</span>
                                    break;
                                default:
                                    <span class="badge bg-warning">Beklemede</span>
                                    break;
                            }
                        </td>
                        <td>
                            <button class="btn btn-success btn-sm approve-btn" data-id="@record.Id" type="button">Onayla</button>
                            <button class="btn btn-danger btn-sm reject-btn" data-id="@record.Id" type="button">Reddet</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Toplu İşlem Butonları -->
    <div class="text-center mt-4">
        <button id="approveAllBtn" class="btn btn-success btn-lg me-2" type="button">Tümünü Onayla</button>
        <button id="rejectAllBtn" class="btn btn-danger btn-lg" type="button">Tümünü Reddet</button>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.getElementById('approveAllBtn').addEventListener('click', function () {
        processAllRequests(true);
    });

    document.getElementById('rejectAllBtn').addEventListener('click', function () {
        processAllRequests(false);
    });

    document.querySelectorAll('.approve-btn').forEach(function (button) {
        button.addEventListener('click', function () {
            processRequest(button.dataset.id,true);
        });
    });

    document.querySelectorAll('.reject-btn').forEach(function (button) {
        button.addEventListener('click', function () {
            processRequest(button.dataset.id,false);
        });
    });

    function processRequest(id,hasOptional) {
        if(hasOptional)
        {
            fetch(`https://localhost:7083/api/Instructor/SelectedStudentApproved?UserId=${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    alert("Öğrenci ders seçimi onaylandı")
                } else {
                    alert('Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu. Lütfen tekrar deneyin.');
            });

        }
        else
        {
            fetch(`https://localhost:7083/api/Instructor/SelectedStudentReject?UserId=${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    alert("Öğrenci ders seçimi reddedildi")
                } else {
                    alert('Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu. Lütfen tekrar deneyin.');
            });

        }
        
    }
    function processAllRequests(hasOptional) {
         const ids = Array.from(document.querySelectorAll('.approve-btn')).map(button => parseInt(button.dataset.id));
        if(hasOptional)
        {
            fetch('https://localhost:7083/api/Instructor/GetAllSelectedStudentApproved', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(ids)
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                } else {
                    alert('Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu. Lütfen tekrar deneyin.');
            });
        }
        else
        {
            fetch('https://localhost:7083/api/Instructor/GetAllSelectedStudentReject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(ids)
            })
            .then(response => response.json())
            .then(data => {
                if (data) {
                } else {
                    alert('Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu. Lütfen tekrar deneyin.');
            });
        }
        
    }

</script>
